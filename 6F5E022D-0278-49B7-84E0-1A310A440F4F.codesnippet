<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>xy_combine_pausable_subscriber</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>protocol Pausable {
    var paused: Bool { get }
    func resume()
}

final class PausableSubscriber&lt;Input , Failure : Error&gt;: Subscriber, Pausable, Cancellable {
    
    let receiveValue: (Input) -&gt; Bool
    
    let receiveCompletion: (Subscribers.Completion&lt;Failure&gt;) -&gt; Void
    
    private var subscription : Subscription? = nil
    
    var paused: Bool = false
    
    init(receiveValue: @escaping (Input) -&gt; Bool, receiveCompletion: @escaping (Subscribers.Completion&lt;Failure&gt;) -&gt; Void) {
        self.receiveValue = receiveValue
        self.receiveCompletion = receiveCompletion
    }
    
    func cancel() {
        subscription?.cancel()
        subscription = nil
    }
    
    func receive(subscription: Subscription) {
        self.subscription = subscription
        subscription.request(.max(1)) // 默认可以接收一个数据。
    }
    
    func receive(_ input: Input) -&gt; Subscribers.Demand {
        if self.receiveValue(input) {
            return .max(1) /// 如果当前处理OK的话，可以再接收一个 数据。
        }
        self.paused = true
        return .none /// This is equivalent to `Demand.max(0)`. 下次不再接收
    }
    
    func receive(completion: Subscribers.Completion&lt;Failure&gt;) {
        self.receiveCompletion(completion)
        subscription = nil
    }
    
    /// 被订阅者调用
    func resume() {
        guard paused else {
            return
        }
        paused = false
        /// 重新启动
        subscription?.request(.max(1)) /// 重新启动发送数据。 /// Tells a publisher that it may send more values to the subscriber.
    }
    
}


extension Publisher {
    /// 观察这里的订阅者，如何 声明式返回。
    func pausableSink(receiveCompletion: @escaping (Subscribers.Completion&lt;Failure&gt;) -&gt; Void, receiveValue: @escaping (Output) -&gt; Bool ) -&gt; Pausable &amp; Cancellable {
        let pausableSink = PausableSubscriber(receiveValue: receiveValue, receiveCompletion: receiveCompletion)
        self.subscribe(pausableSink) /// 这里的self 为当前 发布者。
        return pausableSink
    }
}

/*
let subscriber = [1,2,3,4,5,6].publisher
                        .pausableSink(receiveCompletion: { _ in
                                print("receiveCompletion")
                            }, receiveValue: { val in
                                print(" receiveValue: \(val)")
                                if val == 3 {
                                    print("pausing")
                                    return false
                                } else {
                                    return true
                                }
                            })

DispatchQueue.main.asyncAfter(deadline: .now() + 4) {
    print("start")
    subscriber.resume()
}
*/</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>6F5E022D-0278-49B7-84E0-1A310A440F4F</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>创建可暂停接收数据的 subscriber, 主要用来处理背压, back pressure</string>
	<key>IDECodeSnippetTitle</key>
	<string>xy_combine_pausable_subscriber</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
