<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>xy_class_viewcontroller</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import UIKit
import XYUIKit
import XYInfomationSection

class &lt;#WithdrawEditViewController#&gt;: XYInfomationBaseViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        buildUI()
        loadData()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
    }
    
}

extension &lt;#WithdrawEditViewController#&gt; {
    
    func buildUI() {
        setupNav()
        setupContent()
    }
    
    func setupNav() {
        /*
         navigationController?.setNavigationBarHidden(true, animated: false)
         
         title = "ÁºñËæë"
         nav_setCustom(backImage: WXConfig.wx_backImag)
         
         navigationItem.leftBarButtonItem = .xy_item(withTarget: self, action: #selector(navLeftBtnClick), title: "üîô")
         navigationItem.rightBarButtonItem = .xy_item(withTarget: self, action: #selector(navRightBtnClick), title: "Á°ÆÂÆö")
         */
    }
    
    @objc func navLeftBtnClick(){
        dismiss(animated: true)
        navigationController?.popViewController(animated: true)
    }
    
    @objc func navRightBtnClick(){
        // right item click
    }
    
    func setupContent() {
        view.backgroundColor = .white
        
        // header
        setHeaderView(.line, edgeInsets: .zero)
        
        // content
        setContentWithData(contentData(), itemConfig: { item in
            item.titleWidthRate = 0.5
        }, sectionConfig: { section in
            section.corner(radius: 5)
        }, sectionDistance: 0, contentEdgeInsets: .init(top: 10, left: 10, bottom: 0, right: 10)) { index, cell in
            if cell.model.customCellClass == PhotoCell.self {
                ChoosePhotoController.choosePhoto { image in
                    let model = cell.model
                    model.obj = image as Any
                    cell.model = model
                }
            }
        }
        
        // footer
        setFooterView(.line, edgeInsets: .zero)
    }
    
    func contentData() -&gt; [Any] {
        var result = [Any]()
        
        let section: [[String: Any]] = [
            [
                "title": "",
                "titleKey": "",
                "type": XYInfoCellType.input.rawValue,
                "value": "value"
            ],
            [
                "title": "",
                "titleKey": "",
                "type": XYInfoCellType.choose.rawValue,
                "value": "value"
            ],
            [
                "title": "",
                "titleKey": "",
                "type": XYInfoCellType.switch.rawValue,
                "on": "true".boolValue
            ],
            [
                "title": "",
                "titleKey": "",
                "type": XYInfoCellType.other.rawValue,
                "customCellClass": PhotoCell.self,
                "obj": UIImage.defaultHead ?? UIImage.init() as Any
            ],
        ]
        
        result.append(section)
        return result
    }
    
    /// Ëé∑ÂèñÂΩìÂâçÈ°µÈù¢ÁºñËæëÁöÑÊâÄÊúâÂèÇÊï∞
    var totalParams: [AnyHashable: Any] {
        var params: [AnyHashable: Any] = [:]
        self.view.findSubViewRecursion { subview in
            if let section = subview as? XYInfomationSection {
                params = section.contentKeyValues
                return true
            }
            return false
        }
        return params
    }
    
    /// Ëé∑ÂèñÂΩìÂâçÈ°µÈù¢ÁºñËæëÁöÑÊâÄÊúâÂèÇÊï∞
    var totalModels: [XYInfomationItem] {
        var result: [XYInfomationItem] = []
        self.view.findSubViewRecursion { subview in
            if let section = subview as? XYInfomationSection {
                result.append(contentsOf: section.dataArray)
                return true
            }
            return false
        }
        return result
    }
    
}

extension &lt;#WithdrawEditViewController#&gt; {
    
    func loadData() {
        // refreshUI
    }
    
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>A885B478-251A-4383-AEE4-1030EF92C6C5</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>ÂÆö‰πâÊñ∞ÁöÑÊéßÂà∂Âô®</string>
	<key>IDECodeSnippetTitle</key>
	<string>xy_define_viewcontroller_Swift</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
