<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>xy_use_collectionView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>extension SearchViewController {
    
    /*
     var collectionView: UICollectionView!
     var dataArray: [MyModel] = []
     */
    
    func creatCollectionView() {
        // 创建布局
        let layout = UICollectionViewFlowLayout()
        layout.itemSize = CGSize(width: 100, height: 100) // 设置每个单元格的大小
        layout.minimumLineSpacing = 8 // 设置行间距
        layout.minimumInteritemSpacing = 8 // 设置单元格之间的间距
        
        // 创建 UICollectionView
        collectionView = UICollectionView(frame: self.view.bounds, collectionViewLayout: layout)
        collectionView.backgroundColor = .white
        collectionView.showsVerticalScrollIndicator = false
        collectionView.showsHorizontalScrollIndicator = false
        
        // 注册 cell
        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: "itemCell")
        collectionView.register(ThemeListAdCell.self, forCellWithReuseIdentifier: "adCell")
        
        // 设置数据源和代理
        collectionView.dataSource = self
        collectionView.delegate = self
        
        // 将 collectionView 添加到视图中
        self.view.addSubview(collectionView)
        collectionView.contentInset.top = 7
        collectionView.snp.makeConstraints { make in
            make.left.equalTo(16)
            make.center.equalToSuperview()
            make.bottom.equalToSuperview()
        }
        
        // refresh
        /*
        collectionView.mj_header = MJRefreshNormalHeader(refreshingBlock: { [weak collectionView] in
            collectionView?.mj_header?.endRefreshing()
            collectionView?.mj_footer?.endRefreshing()
        })
        
        let footer = MJRefreshAutoNormalFooter(refreshingBlock: {[weak self] in
            self?.loadMore()
        })
        footer.setTitle(SearchLocalizable(""), for: .idle) // 这里可以指定没有更多数据展示的 footer
        collectionView.mj_footer = footer
         */
        
        updateDataArray()
        
        // 用户购买会员后监听，更新数据
        NotificationCenter.default.addObserver(self, selector: #selector(updateDataArray), name: NSNotification.Name.init("kNotificationOpenVipReload"), object: nil)
    }
    
    @objc func updateDataArray() {
        
    }
    
    
}

extension SearchViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    // 返回集合视图中的单元格数量
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {
        return dataArray.count
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize {
        
        /*
         if isAD {
             return .init(width: AdView.AdViewWidth, height: AdView.AdViewHeight)
         }
         */
        
        return .init(width: 100, height: 100)
    }
    
    // 配置每个单元格
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {
        /*
        let model = dataArray[indexPath.row]
        if model.isAd {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "adCell", for: indexPath) as! ThemeListAdCell
            cell.setModel(model)
            cell.delegate = self
            return cell
        } else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "itemCell", for: indexPath) as! CustomCollectionViewCell
            cell.setModel(model)
            cell.delegate = self
            return cell
        }
         */
        return UICollectionViewCell(frame: .init(x: 0, y: 0, width: 100, height: 100))
    }
    
    // 处理单元格点击事件
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        //print("Selected cell at \(indexPath)")
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        //print(scrollView.contentOffset)
    }
}

class CustomCollectionViewCell: UICollectionViewCell {
    
    private var model: ThemeListModel?
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        contentView.backgroundColor = .white
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func setModel(_ model: ThemeListModel) {
        self.model = model
        
        contentView.clipsToBounds = true
        for sub in self.contentView.subviews {
            sub.removeFromSuperview()
        }
        
    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>7872EA61-CDCF-4D99-B245-ED8EFD0A68E6</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>创建一个 UICollectionView</string>
	<key>IDECodeSnippetTitle</key>
	<string>xy_use_collectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
