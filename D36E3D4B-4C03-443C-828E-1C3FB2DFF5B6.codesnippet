<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>zl_newIMCard_Swift</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// MARK: - 创建卡片Attachment
import ZPMUIKit
/**
 BaseAttachmentDecoder.m 中去添加对应的解析映射
 */

/// 销售推荐卡片 179
@objc(&lt;#ZLOperatorCardAttachment#&gt;) public class &lt;#ZLOperatorCardAttachment#&gt;: ZPMBaseCustomAttachment, NIMCellLayoutConfig, CustomMessageTouchEnableProtocol {
    
//    public override class func mj_objectClassInArray() -&gt; [AnyHashable : Any]! {
//        return ["items": ZLOPItems.description()]
//    }
    
    @objc var rootSourceId: String?
//    @objc var items: [ZLOPItems]? //如果设置对象类型的属性，加上此方法
    
    public override func setValuesForKeys(_ keyedValues: [String : Any]) {
        super.setValuesForKeys(keyedValues)
        if keyedValues.keys.contains("content"), let content = keyedValues["content"] as? [String: Any] {
            mj_setKeyValues(content)
        }
    }
    
    func cellContentHeight() -&gt; CGFloat {
        return 100
    }
    public func enableTouch() -&gt; Bool {
        return true
    }
}

// MARK: layout size
public extension ZLOperatorCardAttachment {
    
    public func contentSize(_ model: NIMMessageModel, cellWidth width: CGFloat) -&gt; CGSize {
        return CGSize(CGFloat.width, cellContentHeight())
    }
    
    public func cellInsets(_ model: NIMMessageModel) -&gt; UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 0, bottom: 16, right: 0)
    }
    
    public func contentViewInsets(_ model: NIMMessageModel) -&gt; UIEdgeInsets {
        return .zero//UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
    }
    
    public func shouldShowAvatar(_ model: NIMMessageModel) -&gt; Bool {
        return false
    }
    
    public func cellContent(_ model: NIMMessageModel) -&gt; String {
        return &lt;#新增的卡片名#&gt;.description()
    }
}

// MARK: - 创建卡片
import UIKit
import SDWebImage
import ZLGlobalTool

class &lt;#ZLOperatorCard#&gt;: ZLBaseMsgContentView {
    
    private var bgView = UIView()
    // ...
    
    override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    public override init!(sessionMessageContentView: ()) {
        super.init(sessionMessageContentView: ())
        bubbleImageView = nil
        backgroundColor = .clear
        
        // bgView
        // ...
        
        bgView.layer.cornerRadius = 8
        addSubview(bgView)
        bgView.backgroundColor = .white
        bgView.snp.makeConstraints({ (make) in
            make.left.equalTo(16)
            make.right.equalTo(-16)
            make.top.bottom.equalToSuperview()
        })
        
        // todo other views
        // ...
    }
    
    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    /// 刷新页面数据
    /// - Parameter data: 数据模型
    override func refresh(_ data: NIMMessageModel!) {
        super.refresh(data)
        guard let obj = data.message?.messageObject as? NIMCustomObject,
              let attachment = obj.attachment as? &lt;#你定义的Attachment#&gt; else {
            return
        }
        
        // refreshContent
        // responder?. -- 做事
        // 埋点 responder?.reportAnalysis(name: "bapp_im_uni_card_exp", params: params)
    }
    
    deinit { }
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>D36E3D4B-4C03-443C-828E-1C3FB2DFF5B6</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>创建新消息和附件</string>
	<key>IDECodeSnippetTitle</key>
	<string>zl_newIMCard_Swift</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
